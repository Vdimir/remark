// Code generated by mockery v1.1.1. DO NOT EDIT.

package search

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	engine "github.com/umputun/remark42/backend/app/store/engine"

	store "github.com/umputun/remark42/backend/app/store"

	types "github.com/umputun/remark42/backend/app/store/search/types"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockService) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: siteID, commentID
func (_m *MockService) Delete(siteID string, commentID string) error {
	ret := _m.Called(siteID, commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(siteID, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields: siteID
func (_m *MockService) Flush(siteID string) error {
	ret := _m.Called(siteID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(siteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Help provides a mock function with given fields:
func (_m *MockService) Help() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IndexDocument provides a mock function with given fields: comment
func (_m *MockService) IndexDocument(comment *store.Comment) error {
	ret := _m.Called(comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*store.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields: ctx, e
func (_m *MockService) Init(ctx context.Context, e engine.Interface) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, engine.Interface) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *MockService) Ready() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Search provides a mock function with given fields: req
func (_m *MockService) Search(req *types.Request) (*types.ResultPage, error) {
	ret := _m.Called(req)

	var r0 *types.ResultPage
	if rf, ok := ret.Get(0).(func(*types.Request) *types.ResultPage); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResultPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
